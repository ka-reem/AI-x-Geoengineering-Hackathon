from typing import Dict, Any, List
from datetime import datetime
import json

class ReportTemplate:
    """Template for formatting the intelligence report"""
    
    @staticmethod
    def format_report(report_data: Dict[str, Any]) -> str:
        """
        Format the report data into a readable string
        
        Args:
            report_data: Dictionary containing report data
            
        Returns:
            Formatted report string
        """
        # Header
        report = [
            f"{'='*80}",
            f"{report_data['title']}",
            f"Date: {report_data['date']}",
            f"Generated By: Autonomous Climate Intelligence Agent ({report_data['version']})",
            f"{'='*80}\n"
        ]
        
        # Data Sources
        report.extend([
            "DATA SOURCES",
            "-----------"
        ])
        for source in report_data['data_sources']:
            report.append(f"- {source['name']}")
            report.append(f"  Last Updated: {source['last_updated']}")
            report.append(f"  Status: {source['status']}\n")
            
        # Executive Summary
        report.extend([
            "EXECUTIVE SUMMARY",
            "-----------------",
            report_data['executive_summary'],
            ""
        ])
        
        # Key Data Updates
        report.extend([
            "KEY DATA UPDATES",
            "----------------"
        ])
        for source, updates in report_data['key_data_updates'].items():
            report.append(f"\n{source.upper()}:")
            if isinstance(updates, dict):
                for key, value in updates.items():
                    report.append(f"- {key}: {value}")
            else:
                report.append(str(updates))
        report.append("")
        
        # New Developments
        report.extend([
            "NEW DEVELOPMENTS & ANALYSIS",
            "--------------------------"
        ])
        for development in report_data['new_developments']:
            report.append(f"- {development}")
        report.append("")
        
        # Action Items
        report.extend([
            "POTENTIAL ACTION ITEMS",
            "---------------------"
        ])
        for item in report_data['action_items']:
            report.append(f"- {item}")
        report.append("")
        
        # References
        report.extend([
            "REFERENCES",
            "----------"
        ])
        for ref in report_data['references']:
            report.append(f"- {ref}")
        report.append("")
        
        # Next Update
        report.extend([
            "NEXT UPDATE",
            "-----------",
            f"Next report scheduled for: {report_data['next_update']}\n",
            f"{'='*80}"
        ])
        
        return "\n".join(report)
    
    @staticmethod
    def save_formatted_report(report_data: Dict[str, Any], output_path: str):
        """
        Save the formatted report to a file
        
        Args:
            report_data: Dictionary containing report data
            output_path: Path to save the formatted report
        """
        formatted_report = ReportTemplate.format_report(report_data)
        with open(output_path, 'w') as f:
            f.write(formatted_report) 